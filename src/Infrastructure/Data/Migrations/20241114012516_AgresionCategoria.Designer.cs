// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApiAlertaMinsal.Infrastructure.Data;

#nullable disable

namespace WebApiAlertaMinsal.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241114012516_AgresionCategoria")]
    partial class AgresionCategoria
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Agresion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 895, DateTimeKind.Unspecified).AddTicks(2670), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAgresion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 11, 13, 22, 25, 15, 895, DateTimeKind.Local).AddTicks(3290));

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 895, DateTimeKind.Unspecified).AddTicks(3030), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Agresion");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.AgresionCategoria", b =>
                {
                    b.Property<int>("AgresionId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaAgresionId")
                        .HasColumnType("int");

                    b.HasKey("AgresionId", "CategoriaAgresionId");

                    b.HasIndex("CategoriaAgresionId");

                    b.ToTable("AgresionCategoria");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.AgresionTestigo", b =>
                {
                    b.Property<int>("AgresionId")
                        .HasColumnType("int");

                    b.Property<int>("TestigoId")
                        .HasColumnType("int");

                    b.HasKey("AgresionId", "TestigoId");

                    b.HasIndex("TestigoId");

                    b.ToTable("AgresionTestigo");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Agresor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComunaId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 895, DateTimeKind.Unspecified).AddTicks(6530), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Digito")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 895, DateTimeKind.Unspecified).AddTicks(6800), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutNormalized")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoAgresorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComunaId");

                    b.HasIndex("TipoAgresorId");

                    b.ToTable("Agresor");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.CategoriaAgresion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 895, DateTimeKind.Unspecified).AddTicks(7880), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 895, DateTimeKind.Unspecified).AddTicks(8130), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TipoAgresionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoAgresionId");

                    b.ToTable("CategoriaAgresion");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.ComplejidadEstablecimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 895, DateTimeKind.Unspecified).AddTicks(9420), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 895, DateTimeKind.Unspecified).AddTicks(9590), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Complejidades");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Comuna", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 896, DateTimeKind.Unspecified).AddTicks(1170), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdRegion")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 896, DateTimeKind.Unspecified).AddTicks(1450), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdRegion");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Comunas");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ComunaId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 896, DateTimeKind.Unspecified).AddTicks(4380), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Digito")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<int>("EstablecimientoId")
                        .HasColumnType("int");

                    b.Property<int>("EstamentoId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 896, DateTimeKind.Unspecified).AddTicks(4630), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MutualidadId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("RutNormalized")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("ComunaId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EstablecimientoId");

                    b.HasIndex("EstamentoId");

                    b.HasIndex("MutualidadId");

                    b.HasIndex("RutNormalized")
                        .IsUnique();

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Establecimiento", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ComplejidadEstablecimientoId")
                        .HasColumnType("int");

                    b.Property<int>("ComunaId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 896, DateTimeKind.Unspecified).AddTicks(7760), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 896, DateTimeKind.Unspecified).AddTicks(8010), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NivelEstablecimientoId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TipoAtencionEstablecimientoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoEstablecimientoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoUrgenciaEstablecimientoId")
                        .HasColumnType("int");

                    b.Property<bool>("Urgency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("ComplejidadEstablecimientoId");

                    b.HasIndex("ComunaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NivelEstablecimientoId");

                    b.HasIndex("TipoAtencionEstablecimientoId");

                    b.HasIndex("TipoEstablecimientoId");

                    b.HasIndex("TipoUrgenciaEstablecimientoId");

                    b.ToTable("Establecimientos");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Estamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Estamentos");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Mutualidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Mutualidades");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.NivelEstablecimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 897, DateTimeKind.Unspecified).AddTicks(2220), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 897, DateTimeKind.Unspecified).AddTicks(2400), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Niveles");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 897, DateTimeKind.Unspecified).AddTicks(3790), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 897, DateTimeKind.Unspecified).AddTicks(4000), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Regiones");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Testigo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 897, DateTimeKind.Unspecified).AddTicks(6210), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Digito")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 897, DateTimeKind.Unspecified).AddTicks(6450), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("RutNormalized")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Testigo");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TipoAgresion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 897, DateTimeKind.Unspecified).AddTicks(8160), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 897, DateTimeKind.Unspecified).AddTicks(8410), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TipoAgresion");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TipoAgresor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 897, DateTimeKind.Unspecified).AddTicks(9910), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 898, DateTimeKind.Unspecified).AddTicks(150), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TipoAgresor");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TipoAtencionEstablecimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 898, DateTimeKind.Unspecified).AddTicks(1720), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 898, DateTimeKind.Unspecified).AddTicks(1890), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TiposAtenciones");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TipoEstablecimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 898, DateTimeKind.Unspecified).AddTicks(3370), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 898, DateTimeKind.Unspecified).AddTicks(3540), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TiposEstablecimientos");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TipoUrgenciaEstablecimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 898, DateTimeKind.Unspecified).AddTicks(5030), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 11, 13, 22, 25, 15, 898, DateTimeKind.Unspecified).AddTicks(5200), new TimeSpan(0, -3, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TiposUrgencias");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiAlertaMinsal.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Agresion", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.Empleado", "Empleado")
                        .WithMany("Agresiones")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.AgresionCategoria", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.Agresion", "Agresion")
                        .WithMany("TipoAgresionCategorias")
                        .HasForeignKey("AgresionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.CategoriaAgresion", "CategoriaAgresion")
                        .WithMany("TipoAgresionCategorias")
                        .HasForeignKey("CategoriaAgresionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agresion");

                    b.Navigation("CategoriaAgresion");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.AgresionTestigo", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.Agresion", "Agresion")
                        .WithMany("AgresionTestigos")
                        .HasForeignKey("AgresionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.Testigo", "Testigo")
                        .WithMany("AgresionTestigos")
                        .HasForeignKey("TestigoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agresion");

                    b.Navigation("Testigo");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Agresor", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.Comuna", "Comuna")
                        .WithMany("Agresores")
                        .HasForeignKey("ComunaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.TipoAgresor", "TipoAgresor")
                        .WithMany("Agresores")
                        .HasForeignKey("TipoAgresorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comuna");

                    b.Navigation("TipoAgresor");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.CategoriaAgresion", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.TipoAgresion", "TipoAgresion")
                        .WithMany("CategoriasAgresion")
                        .HasForeignKey("TipoAgresionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoAgresion");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Comuna", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.Region", "Region")
                        .WithMany("Comunas")
                        .HasForeignKey("IdRegion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Empleado", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.Comuna", "Comuna")
                        .WithMany("Empleados")
                        .HasForeignKey("ComunaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.Establecimiento", "Establecimiento")
                        .WithMany("Empleados")
                        .HasForeignKey("EstablecimientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.Estamento", "Estamento")
                        .WithMany("Empleados")
                        .HasForeignKey("EstamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.Mutualidad", "Mutualidad")
                        .WithMany("Empleados")
                        .HasForeignKey("MutualidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comuna");

                    b.Navigation("Establecimiento");

                    b.Navigation("Estamento");

                    b.Navigation("Mutualidad");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Establecimiento", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.ComplejidadEstablecimiento", "ComplejidadEstablecimiento")
                        .WithMany("Establecimientos")
                        .HasForeignKey("ComplejidadEstablecimientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.Comuna", "Comuna")
                        .WithMany("Establecimientos")
                        .HasForeignKey("ComunaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.NivelEstablecimiento", "NivelEstablecimiento")
                        .WithMany("Establecimientos")
                        .HasForeignKey("NivelEstablecimientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.TipoAtencionEstablecimiento", "TipoAtencionEstablecimiento")
                        .WithMany("Establecimientos")
                        .HasForeignKey("TipoAtencionEstablecimientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.TipoEstablecimiento", "TipoEstablecimiento")
                        .WithMany("Establecimientos")
                        .HasForeignKey("TipoEstablecimientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.TipoUrgenciaEstablecimiento", "TipoUrgenciaEstablecimiento")
                        .WithMany("Establecimientos")
                        .HasForeignKey("TipoUrgenciaEstablecimientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComplejidadEstablecimiento");

                    b.Navigation("Comuna");

                    b.Navigation("NivelEstablecimiento");

                    b.Navigation("TipoAtencionEstablecimiento");

                    b.Navigation("TipoEstablecimiento");

                    b.Navigation("TipoUrgenciaEstablecimiento");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("WebApiAlertaMinsal.Domain.Entities.TodoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TodoList", b =>
                {
                    b.OwnsOne("WebApiAlertaMinsal.Domain.ValueObjects.Colour", "Colour", b1 =>
                        {
                            b1.Property<int>("TodoListId")
                                .HasColumnType("int");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TodoListId");

                            b1.ToTable("TodoLists");

                            b1.WithOwner()
                                .HasForeignKey("TodoListId");
                        });

                    b.Navigation("Colour")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Agresion", b =>
                {
                    b.Navigation("AgresionTestigos");

                    b.Navigation("TipoAgresionCategorias");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.CategoriaAgresion", b =>
                {
                    b.Navigation("TipoAgresionCategorias");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.ComplejidadEstablecimiento", b =>
                {
                    b.Navigation("Establecimientos");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Comuna", b =>
                {
                    b.Navigation("Agresores");

                    b.Navigation("Empleados");

                    b.Navigation("Establecimientos");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Empleado", b =>
                {
                    b.Navigation("Agresiones");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Establecimiento", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Estamento", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Mutualidad", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.NivelEstablecimiento", b =>
                {
                    b.Navigation("Establecimientos");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Region", b =>
                {
                    b.Navigation("Comunas");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.Testigo", b =>
                {
                    b.Navigation("AgresionTestigos");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TipoAgresion", b =>
                {
                    b.Navigation("CategoriasAgresion");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TipoAgresor", b =>
                {
                    b.Navigation("Agresores");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TipoAtencionEstablecimiento", b =>
                {
                    b.Navigation("Establecimientos");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TipoEstablecimiento", b =>
                {
                    b.Navigation("Establecimientos");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TipoUrgenciaEstablecimiento", b =>
                {
                    b.Navigation("Establecimientos");
                });

            modelBuilder.Entity("WebApiAlertaMinsal.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
